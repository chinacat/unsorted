(list (cons (quote start) (quote #f)) (cons (quote visit) (datum->syntax #f (quote (module debug.pr scheme (#%module-begin (require "prolog.ss") (<- (zzz ?a ?b ?c ?d))))))) (cons (quote 141) (quote #f)) (cons (quote 126) (datum->syntax #f (quote (module debug.pr scheme (#%module-begin (require "prolog.ss") (<- (zzz ?a ?b ?c ?d))))))) (cons (quote 127) (datum->syntax #f (quote (module debug.pr scheme (#%module-begin (require "prolog.ss") (<- (zzz ?a ?b ?c ?d))))))) (cons (quote top-non-begin) (quote #f)) (cons (quote 141) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (module debug.pr scheme (#%module-begin (require "prolog.ss") (<- (zzz ?a ?b ?c ?d))))))) (cons (quote 1) (datum->syntax #f (quote module))) (cons (quote 6) (datum->syntax #f (quote (module debug.pr scheme (#%module-begin (require "prolog.ss") (<- (zzz ?a ?b ?c ?d))))))) (cons (quote 101) (quote #f)) (cons (quote 3) (quote #f)) (cons (quote 148) (datum->syntax #f (quote (#%module-begin (require "prolog.ss") (<- (zzz ?a ?b ?c ?d)))))) (cons (quote 126) (datum->syntax #f (quote (#%module-begin (require "prolog.ss") (<- (zzz ?a ?b ?c ?d)))))) (cons (quote 0) (datum->syntax #f (quote (#%module-begin (require "prolog.ss") (<- (zzz ?a ?b ?c ?d)))))) (cons (quote 1) (datum->syntax #f (quote #%module-begin))) (cons (quote 8) (datum->syntax #f (quote (#%module-begin (require "prolog.ss") (<- (zzz ?a ?b ?c ?d)))))) (cons (quote 21) (datum->syntax #f (quote (#%module-begin (require "prolog.ss") (<- (zzz ?a ?b ?c ?d)))))) (cons (quote 22) (datum->syntax #f (quote (#%module-begin (printing-module-begin (require "prolog.ss")) (printing-module-begin (<- (zzz ?a ?b ?c ?d))))))) (cons (quote 9) (datum->syntax #f (quote (#%module-begin (printing-module-begin (require "prolog.ss")) (printing-module-begin (<- (zzz ?a ?b ?c ?d))))))) (cons (quote 2) (datum->syntax #f (quote (#%module-begin (printing-module-begin (require "prolog.ss")) (printing-module-begin (<- (zzz ?a ?b ?c ?d))))))) (cons (quote 127) (datum->syntax #f (quote (#%module-begin (printing-module-begin (require "prolog.ss")) (printing-module-begin (<- (zzz ?a ?b ?c ?d))))))) (cons (quote 0) (datum->syntax #f (quote (#%module-begin (printing-module-begin (require "prolog.ss")) (printing-module-begin (<- (zzz ?a ?b ?c ?d))))))) (cons (quote 1) (datum->syntax #f (quote #%module-begin))) (cons (quote 6) (datum->syntax #f (quote (#%module-begin (printing-module-begin (require "prolog.ss")) (printing-module-begin (<- (zzz ?a ?b ?c ?d))))))) (cons (quote 102) (quote #f)) (cons (quote 148) (datum->syntax #f (quote (#%module-begin (printing-module-begin (require "prolog.ss")) (printing-module-begin (<- (zzz ?a ?b ?c ?d))))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (printing-module-begin (require "prolog.ss"))))) (cons (quote 1) (datum->syntax #f (quote printing-module-begin))) (cons (quote 8) (datum->syntax #f (quote (printing-module-begin (require "prolog.ss"))))) (cons (quote 21) (datum->syntax #f (quote (printing-module-begin (require "prolog.ss"))))) (cons (quote 130) (datum->syntax #f (quote (require "prolog.ss")))) (cons (quote 132) (datum->syntax #f (quote (require "prolog.ss")))) (cons (quote 141) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (require "prolog.ss")))) (cons (quote 1) (datum->syntax #f (quote require))) (cons (quote 8) (datum->syntax #f (quote (require "prolog.ss")))) (cons (quote 21) (datum->syntax #f (quote (require "prolog.ss")))) (cons (quote 22) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 9) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 0) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 1) (datum->syntax #f (quote #%require))) (cons (quote 6) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 100) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 2) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 133) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 131) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 22) (datum->syntax #f (quote (begin (#%require "prolog.ss"))))) (cons (quote 9) (datum->syntax #f (quote (begin (#%require "prolog.ss"))))) (cons (quote 0) (datum->syntax #f (quote (begin (#%require "prolog.ss"))))) (cons (quote 1) (datum->syntax #f (quote begin))) (cons (quote 6) (datum->syntax #f (quote (begin (#%require "prolog.ss"))))) (cons (quote 100) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (begin (#%require "prolog.ss"))))) (cons (quote 2) (datum->syntax #f (quote (begin (#%require "prolog.ss"))))) (cons (quote 148) (datum->syntax #f (quote (begin (#%require "prolog.ss"))))) (cons (quote 11) (cons (datum->syntax #f (quote (#%require "prolog.ss"))) (cons (datum->syntax #f (quote (printing-module-begin (<- (zzz ?a ?b ?c ?d))))) (quote ())))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 1) (datum->syntax #f (quote #%require))) (cons (quote 6) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 100) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 2) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 148) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 6) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 119) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (#%require "prolog.ss")))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (printing-module-begin (<- (zzz ?a ?b ?c ?d)))))) (cons (quote 1) (datum->syntax #f (quote printing-module-begin))) (cons (quote 8) (datum->syntax #f (quote (printing-module-begin (<- (zzz ?a ?b ?c ?d)))))) (cons (quote 21) (datum->syntax #f (quote (printing-module-begin (<- (zzz ?a ?b ?c ?d)))))) (cons (quote 130) (datum->syntax #f (quote (<- (zzz ?a ?b ?c ?d))))) (cons (quote 132) (datum->syntax #f (quote (<- (zzz ?a ?b ?c ?d))))) (cons (quote 141) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (<- (zzz ?a ?b ?c ?d))))) (cons (quote 1) (datum->syntax #f (quote <-))) (cons (quote 8) (datum->syntax #f (quote (<- (zzz ?a ?b ?c ?d))))) (cons (quote 21) (datum->syntax #f (quote (<- (zzz ?a ?b ?c ?d))))) (cons (quote 22) (datum->syntax #f (quote (let () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 9) (datum->syntax #f (quote (let () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 0) (datum->syntax #f (quote (let () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 1) (datum->syntax #f (quote let))) (cons (quote 8) (datum->syntax #f (quote (let () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 21) (datum->syntax #f (quote (let () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 22) (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 9) (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 0) (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 1) (datum->syntax #f (quote let-values))) (cons (quote 6) (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 100) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 2) (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 133) (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 131) (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 22) (datum->syntax #f (quote (begin (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values))))) (cons (quote 9) (datum->syntax #f (quote (begin (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values))))) (cons (quote 0) (datum->syntax #f (quote (begin (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values))))) (cons (quote 1) (datum->syntax #f (quote begin))) (cons (quote 6) (datum->syntax #f (quote (begin (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values))))) (cons (quote 100) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (begin (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values))))) (cons (quote 2) (datum->syntax #f (quote (begin (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values))))) (cons (quote 148) (datum->syntax #f (quote (begin (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values))))) (cons (quote 11) (cons (datum->syntax #f (quote (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values))) (quote ()))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values)))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values)))) (cons (quote 100) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values)))) (cons (quote 2) (datum->syntax #f (quote (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values)))) (cons (quote 148) (datum->syntax #f (quote (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values)))) (cons (quote 135) (quote ())) (cons (quote 13) (quote #f)) (cons (quote 3) (quote #f)) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values)))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values)))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (call-with-values (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) print-values)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote call-with-values))) (cons (quote 1) (datum->syntax #f (quote call-with-values))) (cons (quote 125) (cons (datum->syntax #f (quote call-with-values)) (datum->syntax #f (quote call-with-values)))) (cons (quote 2) (datum->syntax #f (quote call-with-values))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))))) (cons (quote 1) (datum->syntax #f (quote lambda))) (cons (quote 6) (datum->syntax #f (quote (lambda () (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))))) (cons (quote 110) (quote #f)) (cons (quote 17) (cons (datum->syntax #f (quote ())) (datum->syntax #f (quote ((let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))))) (cons (quote 10) (datum->syntax #f (quote ((let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))))) (cons (quote 3) (quote #f)) (cons (quote 24) (cons (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))) (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))))) (cons (quote 126) (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 127) (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 12) (datum->syntax #f (quote ((let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))))) (cons (quote 4) (datum->syntax #f (quote ((let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 1) (datum->syntax #f (quote let-values))) (cons (quote 6) (datum->syntax #f (quote (let-values () (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 112) (quote #f)) (cons (quote 16) (cons (quote ()) (datum->syntax #f (quote ((add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))))) (cons (quote 13) (quote #f)) (cons (quote 10) (datum->syntax #f (quote ((add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 3) (quote #f)) (cons (quote 24) (cons (datum->syntax #f (quote (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) (datum->syntax #f (quote (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 126) (datum->syntax #f (quote (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))) (cons (quote 127) (datum->syntax #f (quote (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))) (cons (quote 12) (datum->syntax #f (quote ((add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 4) (datum->syntax #f (quote ((add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))) (cons (quote 1) (datum->syntax #f (quote add-clause))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))) (cons (quote 8) (datum->syntax #f (quote (#%app add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))) (cons (quote 21) (datum->syntax #f (quote (#%app add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))) (cons (quote 22) (datum->syntax #f (quote (#%app add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))) (cons (quote 9) (datum->syntax #f (quote (#%app add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))) (cons (quote 0) (datum->syntax #f (quote (#%app add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (add-clause (quote zzz) 4 (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote add-clause))) (cons (quote 1) (datum->syntax #f (quote add-clause))) (cons (quote 125) (cons (datum->syntax #f (quote add-clause)) (datum->syntax #f (quote add-clause)))) (cons (quote 2) (datum->syntax #f (quote add-clause))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (quote zzz)))) (cons (quote 1) (datum->syntax #f (quote quote))) (cons (quote 6) (datum->syntax #f (quote (quote zzz)))) (cons (quote 117) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (quote zzz)))) (cons (quote 2) (datum->syntax #f (quote (quote zzz)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote 4))) (cons (quote 1) (datum->syntax #f (quote #%datum))) (cons (quote 142) (datum->syntax #f (quote (#%datum . 4)))) (cons (quote 6) (datum->syntax #f (quote (#%datum . 4)))) (cons (quote 115) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (quote 4)))) (cons (quote 2) (datum->syntax #f (quote (quote 4)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) (cons (quote 1) (datum->syntax #f (quote lambda))) (cons (quote 8) (datum->syntax #f (quote (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) (cons (quote 21) (datum->syntax #f (quote (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) (cons (quote 22) (datum->syntax #f (quote (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) (cons (quote 9) (datum->syntax #f (quote (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) (cons (quote 0) (datum->syntax #f (quote (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) (cons (quote 1) (datum->syntax #f (quote lambda))) (cons (quote 6) (datum->syntax #f (quote (lambda (goal success-cont cut-cont failure-cont) (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) (cons (quote 110) (quote #f)) (cons (quote 17) (cons (datum->syntax #f (quote (goal success-cont cut-cont failure-cont))) (datum->syntax #f (quote ((let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))))) (cons (quote 10) (datum->syntax #f (quote ((let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) (cons (quote 3) (quote #f)) (cons (quote 24) (cons (datum->syntax #f (quote (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))) (datum->syntax #f (quote (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) (cons (quote 126) (datum->syntax #f (quote (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 0) (datum->syntax #f (quote (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 1) (datum->syntax #f (quote let))) (cons (quote 8) (datum->syntax #f (quote (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 21) (datum->syntax #f (quote (let ((?a1 (make-variable (quote ?a) (new-counter))) (?b2 (make-variable (quote ?b) (new-counter))) (?c3 (make-variable (quote ?c) (new-counter))) (?d4 (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 22) (datum->syntax #f (quote (let-values (((?a1) (make-variable (quote ?a) (new-counter))) ((?b2) (make-variable (quote ?b) (new-counter))) ((?c3) (make-variable (quote ?c) (new-counter))) ((?d4) (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 9) (datum->syntax #f (quote (let-values (((?a1) (make-variable (quote ?a) (new-counter))) ((?b2) (make-variable (quote ?b) (new-counter))) ((?c3) (make-variable (quote ?c) (new-counter))) ((?d4) (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 2) (datum->syntax #f (quote (let-values (((?a1) (make-variable (quote ?a) (new-counter))) ((?b2) (make-variable (quote ?b) (new-counter))) ((?c3) (make-variable (quote ?c) (new-counter))) ((?d4) (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 127) (datum->syntax #f (quote (let-values (((?a1) (make-variable (quote ?a) (new-counter))) ((?b2) (make-variable (quote ?b) (new-counter))) ((?c3) (make-variable (quote ?c) (new-counter))) ((?d4) (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 12) (datum->syntax #f (quote ((let-values (((?a1) (make-variable (quote ?a) (new-counter))) ((?b2) (make-variable (quote ?b) (new-counter))) ((?c3) (make-variable (quote ?c) (new-counter))) ((?d4) (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) (cons (quote 4) (datum->syntax #f (quote ((let-values (((?a1) (make-variable (quote ?a) (new-counter))) ((?b2) (make-variable (quote ?b) (new-counter))) ((?c3) (make-variable (quote ?c) (new-counter))) ((?d4) (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (let-values (((?a1) (make-variable (quote ?a) (new-counter))) ((?b2) (make-variable (quote ?b) (new-counter))) ((?c3) (make-variable (quote ?c) (new-counter))) ((?d4) (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 1) (datum->syntax #f (quote let-values))) (cons (quote 6) (datum->syntax #f (quote (let-values (((?a1) (make-variable (quote ?a) (new-counter))) ((?b2) (make-variable (quote ?b) (new-counter))) ((?c3) (make-variable (quote ?c) (new-counter))) ((?d4) (make-variable (quote ?d) (new-counter)))) (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 112) (quote #f)) (cons (quote 16) (cons (cons (datum->syntax #f (quote ((?a1) (make-variable (quote ?a) (new-counter))))) (cons (datum->syntax #f (quote ((?b2) (make-variable (quote ?b) (new-counter))))) (cons (datum->syntax #f (quote ((?c3) (make-variable (quote ?c) (new-counter))))) (cons (datum->syntax #f (quote ((?d4) (make-variable (quote ?d) (new-counter))))) (quote ()))))) (datum->syntax #f (quote ((if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (make-variable (quote ?a) (new-counter))))) (cons (quote 1) (datum->syntax #f (quote make-variable))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app make-variable (quote ?a) (new-counter))))) (cons (quote 8) (datum->syntax #f (quote (#%app make-variable (quote ?a) (new-counter))))) (cons (quote 21) (datum->syntax #f (quote (#%app make-variable (quote ?a) (new-counter))))) (cons (quote 22) (datum->syntax #f (quote (#%app make-variable (quote ?a) (new-counter))))) (cons (quote 9) (datum->syntax #f (quote (#%app make-variable (quote ?a) (new-counter))))) (cons (quote 0) (datum->syntax #f (quote (#%app make-variable (quote ?a) (new-counter))))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app make-variable (quote ?a) (new-counter))))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (make-variable (quote ?a) (new-counter))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote make-variable))) (cons (quote 1) (datum->syntax #f (quote make-variable))) (cons (quote 125) (cons (datum->syntax #f (quote make-variable)) (datum->syntax #f (quote make-variable)))) (cons (quote 2) (datum->syntax #f (quote make-variable))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (quote ?a)))) (cons (quote 1) (datum->syntax #f (quote quote))) (cons (quote 6) (datum->syntax #f (quote (quote ?a)))) (cons (quote 117) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (quote ?a)))) (cons (quote 2) (datum->syntax #f (quote (quote ?a)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (new-counter)))) (cons (quote 1) (datum->syntax #f (quote new-counter))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 8) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 21) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 22) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 9) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 0) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (new-counter)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote new-counter))) (cons (quote 1) (datum->syntax #f (quote new-counter))) (cons (quote 125) (cons (datum->syntax #f (quote new-counter)) (datum->syntax #f (quote new-counter)))) (cons (quote 2) (datum->syntax #f (quote new-counter))) (cons (quote 5) (datum->syntax #f (quote (new-counter)))) (cons (quote 7) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 2) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 5) (datum->syntax #f (quote (make-variable (quote ?a) (#%app new-counter))))) (cons (quote 7) (datum->syntax #f (quote (#%app make-variable (quote ?a) (#%app new-counter))))) (cons (quote 2) (datum->syntax #f (quote (#%app make-variable (quote ?a) (#%app new-counter))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (make-variable (quote ?b) (new-counter))))) (cons (quote 1) (datum->syntax #f (quote make-variable))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app make-variable (quote ?b) (new-counter))))) (cons (quote 8) (datum->syntax #f (quote (#%app make-variable (quote ?b) (new-counter))))) (cons (quote 21) (datum->syntax #f (quote (#%app make-variable (quote ?b) (new-counter))))) (cons (quote 22) (datum->syntax #f (quote (#%app make-variable (quote ?b) (new-counter))))) (cons (quote 9) (datum->syntax #f (quote (#%app make-variable (quote ?b) (new-counter))))) (cons (quote 0) (datum->syntax #f (quote (#%app make-variable (quote ?b) (new-counter))))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app make-variable (quote ?b) (new-counter))))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (make-variable (quote ?b) (new-counter))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote make-variable))) (cons (quote 1) (datum->syntax #f (quote make-variable))) (cons (quote 125) (cons (datum->syntax #f (quote make-variable)) (datum->syntax #f (quote make-variable)))) (cons (quote 2) (datum->syntax #f (quote make-variable))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (quote ?b)))) (cons (quote 1) (datum->syntax #f (quote quote))) (cons (quote 6) (datum->syntax #f (quote (quote ?b)))) (cons (quote 117) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (quote ?b)))) (cons (quote 2) (datum->syntax #f (quote (quote ?b)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (new-counter)))) (cons (quote 1) (datum->syntax #f (quote new-counter))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 8) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 21) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 22) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 9) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 0) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (new-counter)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote new-counter))) (cons (quote 1) (datum->syntax #f (quote new-counter))) (cons (quote 125) (cons (datum->syntax #f (quote new-counter)) (datum->syntax #f (quote new-counter)))) (cons (quote 2) (datum->syntax #f (quote new-counter))) (cons (quote 5) (datum->syntax #f (quote (new-counter)))) (cons (quote 7) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 2) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 5) (datum->syntax #f (quote (make-variable (quote ?b) (#%app new-counter))))) (cons (quote 7) (datum->syntax #f (quote (#%app make-variable (quote ?b) (#%app new-counter))))) (cons (quote 2) (datum->syntax #f (quote (#%app make-variable (quote ?b) (#%app new-counter))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (make-variable (quote ?c) (new-counter))))) (cons (quote 1) (datum->syntax #f (quote make-variable))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app make-variable (quote ?c) (new-counter))))) (cons (quote 8) (datum->syntax #f (quote (#%app make-variable (quote ?c) (new-counter))))) (cons (quote 21) (datum->syntax #f (quote (#%app make-variable (quote ?c) (new-counter))))) (cons (quote 22) (datum->syntax #f (quote (#%app make-variable (quote ?c) (new-counter))))) (cons (quote 9) (datum->syntax #f (quote (#%app make-variable (quote ?c) (new-counter))))) (cons (quote 0) (datum->syntax #f (quote (#%app make-variable (quote ?c) (new-counter))))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app make-variable (quote ?c) (new-counter))))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (make-variable (quote ?c) (new-counter))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote make-variable))) (cons (quote 1) (datum->syntax #f (quote make-variable))) (cons (quote 125) (cons (datum->syntax #f (quote make-variable)) (datum->syntax #f (quote make-variable)))) (cons (quote 2) (datum->syntax #f (quote make-variable))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (quote ?c)))) (cons (quote 1) (datum->syntax #f (quote quote))) (cons (quote 6) (datum->syntax #f (quote (quote ?c)))) (cons (quote 117) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (quote ?c)))) (cons (quote 2) (datum->syntax #f (quote (quote ?c)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (new-counter)))) (cons (quote 1) (datum->syntax #f (quote new-counter))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 8) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 21) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 22) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 9) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 0) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (new-counter)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote new-counter))) (cons (quote 1) (datum->syntax #f (quote new-counter))) (cons (quote 125) (cons (datum->syntax #f (quote new-counter)) (datum->syntax #f (quote new-counter)))) (cons (quote 2) (datum->syntax #f (quote new-counter))) (cons (quote 5) (datum->syntax #f (quote (new-counter)))) (cons (quote 7) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 2) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 5) (datum->syntax #f (quote (make-variable (quote ?c) (#%app new-counter))))) (cons (quote 7) (datum->syntax #f (quote (#%app make-variable (quote ?c) (#%app new-counter))))) (cons (quote 2) (datum->syntax #f (quote (#%app make-variable (quote ?c) (#%app new-counter))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (make-variable (quote ?d) (new-counter))))) (cons (quote 1) (datum->syntax #f (quote make-variable))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app make-variable (quote ?d) (new-counter))))) (cons (quote 8) (datum->syntax #f (quote (#%app make-variable (quote ?d) (new-counter))))) (cons (quote 21) (datum->syntax #f (quote (#%app make-variable (quote ?d) (new-counter))))) (cons (quote 22) (datum->syntax #f (quote (#%app make-variable (quote ?d) (new-counter))))) (cons (quote 9) (datum->syntax #f (quote (#%app make-variable (quote ?d) (new-counter))))) (cons (quote 0) (datum->syntax #f (quote (#%app make-variable (quote ?d) (new-counter))))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app make-variable (quote ?d) (new-counter))))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (make-variable (quote ?d) (new-counter))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote make-variable))) (cons (quote 1) (datum->syntax #f (quote make-variable))) (cons (quote 125) (cons (datum->syntax #f (quote make-variable)) (datum->syntax #f (quote make-variable)))) (cons (quote 2) (datum->syntax #f (quote make-variable))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (quote ?d)))) (cons (quote 1) (datum->syntax #f (quote quote))) (cons (quote 6) (datum->syntax #f (quote (quote ?d)))) (cons (quote 117) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (quote ?d)))) (cons (quote 2) (datum->syntax #f (quote (quote ?d)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (new-counter)))) (cons (quote 1) (datum->syntax #f (quote new-counter))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 8) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 21) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 22) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 9) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 0) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (new-counter)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote new-counter))) (cons (quote 1) (datum->syntax #f (quote new-counter))) (cons (quote 125) (cons (datum->syntax #f (quote new-counter)) (datum->syntax #f (quote new-counter)))) (cons (quote 2) (datum->syntax #f (quote new-counter))) (cons (quote 5) (datum->syntax #f (quote (new-counter)))) (cons (quote 7) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 2) (datum->syntax #f (quote (#%app new-counter)))) (cons (quote 5) (datum->syntax #f (quote (make-variable (quote ?d) (#%app new-counter))))) (cons (quote 7) (datum->syntax #f (quote (#%app make-variable (quote ?d) (#%app new-counter))))) (cons (quote 2) (datum->syntax #f (quote (#%app make-variable (quote ?d) (#%app new-counter))))) (cons (quote 13) (quote #f)) (cons (quote 10) (datum->syntax #f (quote ((if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 3) (quote #f)) (cons (quote 24) (cons (datum->syntax #f (quote (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))) (datum->syntax #f (quote (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 126) (datum->syntax #f (quote (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))) (cons (quote 127) (datum->syntax #f (quote (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))) (cons (quote 12) (datum->syntax #f (quote ((if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 4) (datum->syntax #f (quote ((if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont)))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))) (cons (quote 1) (datum->syntax #f (quote if))) (cons (quote 6) (datum->syntax #f (quote (if (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))) (success-cont failure-cont) (failure-cont))))) (cons (quote 105) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))))) (cons (quote 1) (datum->syntax #f (quote unify!))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))))) (cons (quote 8) (datum->syntax #f (quote (#%app unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))))) (cons (quote 21) (datum->syntax #f (quote (#%app unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))))) (cons (quote 22) (datum->syntax #f (quote (#%app unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))))) (cons (quote 9) (datum->syntax #f (quote (#%app unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))))) (cons (quote 0) (datum->syntax #f (quote (#%app unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (unify! (cdr goal) (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote unify!))) (cons (quote 1) (datum->syntax #f (quote unify!))) (cons (quote 125) (cons (datum->syntax #f (quote unify!)) (datum->syntax #f (quote unify!)))) (cons (quote 2) (datum->syntax #f (quote unify!))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (cdr goal)))) (cons (quote 1) (datum->syntax #f (quote cdr))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app cdr goal)))) (cons (quote 8) (datum->syntax #f (quote (#%app cdr goal)))) (cons (quote 21) (datum->syntax #f (quote (#%app cdr goal)))) (cons (quote 22) (datum->syntax #f (quote (#%app cdr goal)))) (cons (quote 9) (datum->syntax #f (quote (#%app cdr goal)))) (cons (quote 0) (datum->syntax #f (quote (#%app cdr goal)))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app cdr goal)))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (cdr goal)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote cdr))) (cons (quote 1) (datum->syntax #f (quote cdr))) (cons (quote 125) (cons (datum->syntax #f (quote cdr)) (datum->syntax #f (quote cdr)))) (cons (quote 2) (datum->syntax #f (quote cdr))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote goal))) (cons (quote 1) (datum->syntax #f (quote goal))) (cons (quote 125) (cons (datum->syntax #f (quote goal)) (datum->syntax #f (quote goal)))) (cons (quote 2) (datum->syntax #f (quote goal))) (cons (quote 5) (datum->syntax #f (quote (cdr goal)))) (cons (quote 7) (datum->syntax #f (quote (#%app cdr goal)))) (cons (quote 2) (datum->syntax #f (quote (#%app cdr goal)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))))) (cons (quote 1) (datum->syntax #f (quote cons))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))))) (cons (quote 8) (datum->syntax #f (quote (#%app cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))))) (cons (quote 21) (datum->syntax #f (quote (#%app cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))))) (cons (quote 22) (datum->syntax #f (quote (#%app cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))))) (cons (quote 9) (datum->syntax #f (quote (#%app cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))))) (cons (quote 0) (datum->syntax #f (quote (#%app cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (cons ?a1 (cons ?b2 (cons ?c3 (cons ?d4 (quote ())))))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote cons))) (cons (quote 1) (datum->syntax #f (quote cons))) (cons (quote 125) (cons (datum->syntax #f (quote cons)) (datum->syntax #f (quote cons)))) (cons (quote 2) (datum->syntax #f (quote cons))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote ?a1))) (cons (quote 1) (datum->syntax #f (quote ?a1))) (cons (quote 125) (cons (datum->syntax #f (quote ?a1)) (datum->syntax #f (quote ?a1)))) (cons (quote 2) (datum->syntax #f (quote ?a1))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))) (cons (quote 1) (datum->syntax #f (quote cons))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))) (cons (quote 8) (datum->syntax #f (quote (#%app cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))) (cons (quote 21) (datum->syntax #f (quote (#%app cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))) (cons (quote 22) (datum->syntax #f (quote (#%app cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))) (cons (quote 9) (datum->syntax #f (quote (#%app cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))) (cons (quote 0) (datum->syntax #f (quote (#%app cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (cons ?b2 (cons ?c3 (cons ?d4 (quote ()))))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote cons))) (cons (quote 1) (datum->syntax #f (quote cons))) (cons (quote 125) (cons (datum->syntax #f (quote cons)) (datum->syntax #f (quote cons)))) (cons (quote 2) (datum->syntax #f (quote cons))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote ?b2))) (cons (quote 1) (datum->syntax #f (quote ?b2))) (cons (quote 125) (cons (datum->syntax #f (quote ?b2)) (datum->syntax #f (quote ?b2)))) (cons (quote 2) (datum->syntax #f (quote ?b2))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (cons ?c3 (cons ?d4 (quote ())))))) (cons (quote 1) (datum->syntax #f (quote cons))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app cons ?c3 (cons ?d4 (quote ())))))) (cons (quote 8) (datum->syntax #f (quote (#%app cons ?c3 (cons ?d4 (quote ())))))) (cons (quote 21) (datum->syntax #f (quote (#%app cons ?c3 (cons ?d4 (quote ())))))) (cons (quote 22) (datum->syntax #f (quote (#%app cons ?c3 (cons ?d4 (quote ())))))) (cons (quote 9) (datum->syntax #f (quote (#%app cons ?c3 (cons ?d4 (quote ())))))) (cons (quote 0) (datum->syntax #f (quote (#%app cons ?c3 (cons ?d4 (quote ())))))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app cons ?c3 (cons ?d4 (quote ())))))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (cons ?c3 (cons ?d4 (quote ())))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote cons))) (cons (quote 1) (datum->syntax #f (quote cons))) (cons (quote 125) (cons (datum->syntax #f (quote cons)) (datum->syntax #f (quote cons)))) (cons (quote 2) (datum->syntax #f (quote cons))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote ?c3))) (cons (quote 1) (datum->syntax #f (quote ?c3))) (cons (quote 125) (cons (datum->syntax #f (quote ?c3)) (datum->syntax #f (quote ?c3)))) (cons (quote 2) (datum->syntax #f (quote ?c3))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (cons ?d4 (quote ()))))) (cons (quote 1) (datum->syntax #f (quote cons))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app cons ?d4 (quote ()))))) (cons (quote 8) (datum->syntax #f (quote (#%app cons ?d4 (quote ()))))) (cons (quote 21) (datum->syntax #f (quote (#%app cons ?d4 (quote ()))))) (cons (quote 22) (datum->syntax #f (quote (#%app cons ?d4 (quote ()))))) (cons (quote 9) (datum->syntax #f (quote (#%app cons ?d4 (quote ()))))) (cons (quote 0) (datum->syntax #f (quote (#%app cons ?d4 (quote ()))))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app cons ?d4 (quote ()))))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (cons ?d4 (quote ()))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote cons))) (cons (quote 1) (datum->syntax #f (quote cons))) (cons (quote 125) (cons (datum->syntax #f (quote cons)) (datum->syntax #f (quote cons)))) (cons (quote 2) (datum->syntax #f (quote cons))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote ?d4))) (cons (quote 1) (datum->syntax #f (quote ?d4))) (cons (quote 125) (cons (datum->syntax #f (quote ?d4)) (datum->syntax #f (quote ?d4)))) (cons (quote 2) (datum->syntax #f (quote ?d4))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (quote ())))) (cons (quote 1) (datum->syntax #f (quote quote))) (cons (quote 6) (datum->syntax #f (quote (quote ())))) (cons (quote 117) (quote #f)) (cons (quote 7) (datum->syntax #f (quote (quote ())))) (cons (quote 2) (datum->syntax #f (quote (quote ())))) (cons (quote 5) (datum->syntax #f (quote (cons ?d4 (quote ()))))) (cons (quote 7) (datum->syntax #f (quote (#%app cons ?d4 (quote ()))))) (cons (quote 2) (datum->syntax #f (quote (#%app cons ?d4 (quote ()))))) (cons (quote 5) (datum->syntax #f (quote (cons ?c3 (#%app cons ?d4 (quote ())))))) (cons (quote 7) (datum->syntax #f (quote (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (cons (quote 2) (datum->syntax #f (quote (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (cons (quote 5) (datum->syntax #f (quote (cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ()))))))) (cons (quote 7) (datum->syntax #f (quote (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ()))))))) (cons (quote 2) (datum->syntax #f (quote (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ()))))))) (cons (quote 5) (datum->syntax #f (quote (cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))))) (cons (quote 7) (datum->syntax #f (quote (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))))) (cons (quote 2) (datum->syntax #f (quote (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))))) (cons (quote 5) (datum->syntax #f (quote (unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ()))))))))) (cons (quote 7) (datum->syntax #f (quote (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ()))))))))) (cons (quote 2) (datum->syntax #f (quote (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ()))))))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (success-cont failure-cont)))) (cons (quote 1) (datum->syntax #f (quote success-cont))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app success-cont failure-cont)))) (cons (quote 8) (datum->syntax #f (quote (#%app success-cont failure-cont)))) (cons (quote 21) (datum->syntax #f (quote (#%app success-cont failure-cont)))) (cons (quote 22) (datum->syntax #f (quote (#%app success-cont failure-cont)))) (cons (quote 9) (datum->syntax #f (quote (#%app success-cont failure-cont)))) (cons (quote 0) (datum->syntax #f (quote (#%app success-cont failure-cont)))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app success-cont failure-cont)))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (success-cont failure-cont)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote success-cont))) (cons (quote 1) (datum->syntax #f (quote success-cont))) (cons (quote 125) (cons (datum->syntax #f (quote success-cont)) (datum->syntax #f (quote success-cont)))) (cons (quote 2) (datum->syntax #f (quote success-cont))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote failure-cont))) (cons (quote 1) (datum->syntax #f (quote failure-cont))) (cons (quote 125) (cons (datum->syntax #f (quote failure-cont)) (datum->syntax #f (quote failure-cont)))) (cons (quote 2) (datum->syntax #f (quote failure-cont))) (cons (quote 5) (datum->syntax #f (quote (success-cont failure-cont)))) (cons (quote 7) (datum->syntax #f (quote (#%app success-cont failure-cont)))) (cons (quote 2) (datum->syntax #f (quote (#%app success-cont failure-cont)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote (failure-cont)))) (cons (quote 1) (datum->syntax #f (quote failure-cont))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 142) (datum->syntax #f (quote (#%app failure-cont)))) (cons (quote 8) (datum->syntax #f (quote (#%app failure-cont)))) (cons (quote 21) (datum->syntax #f (quote (#%app failure-cont)))) (cons (quote 22) (datum->syntax #f (quote (#%app failure-cont)))) (cons (quote 9) (datum->syntax #f (quote (#%app failure-cont)))) (cons (quote 0) (datum->syntax #f (quote (#%app failure-cont)))) (cons (quote 1) (datum->syntax #f (quote #%app))) (cons (quote 6) (datum->syntax #f (quote (#%app failure-cont)))) (cons (quote 109) (quote #f)) (cons (quote 4) (datum->syntax #f (quote (failure-cont)))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote failure-cont))) (cons (quote 1) (datum->syntax #f (quote failure-cont))) (cons (quote 125) (cons (datum->syntax #f (quote failure-cont)) (datum->syntax #f (quote failure-cont)))) (cons (quote 2) (datum->syntax #f (quote failure-cont))) (cons (quote 5) (datum->syntax #f (quote (failure-cont)))) (cons (quote 7) (datum->syntax #f (quote (#%app failure-cont)))) (cons (quote 2) (datum->syntax #f (quote (#%app failure-cont)))) (cons (quote 7) (datum->syntax #f (quote (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))) (cons (quote 2) (datum->syntax #f (quote (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))) (cons (quote 5) (datum->syntax #f (quote ((if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont)))))) (cons (quote 7) (datum->syntax #f (quote (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont)))))) (cons (quote 2) (datum->syntax #f (quote (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont)))))) (cons (quote 5) (datum->syntax #f (quote ((let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))) (cons (quote 7) (datum->syntax #f (quote (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))) (cons (quote 2) (datum->syntax #f (quote (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))) (cons (quote 5) (datum->syntax #f (quote (add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont)))))))) (cons (quote 7) (datum->syntax #f (quote (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont)))))))) (cons (quote 2) (datum->syntax #f (quote (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont)))))))) (cons (quote 5) (datum->syntax #f (quote ((#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))))) (cons (quote 7) (datum->syntax #f (quote (let-values () (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))))) (cons (quote 2) (datum->syntax #f (quote (let-values () (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))))) (cons (quote 5) (datum->syntax #f (quote ((let-values () (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont)))))))))) (cons (quote 7) (datum->syntax #f (quote (lambda () (let-values () (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont)))))))))) (cons (quote 2) (datum->syntax #f (quote (lambda () (let-values () (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont)))))))))) (cons (quote 3) (quote #f)) (cons (quote 0) (datum->syntax #f (quote print-values))) (cons (quote 1) (datum->syntax #f (quote print-values))) (cons (quote 125) (cons (datum->syntax #f (quote print-values)) (datum->syntax #f (quote print-values)))) (cons (quote 2) (datum->syntax #f (quote print-values))) (cons (quote 5) (datum->syntax #f (quote (call-with-values (lambda () (let-values () (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))) print-values)))) (cons (quote 7) (datum->syntax #f (quote (#%app call-with-values (lambda () (let-values () (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))) print-values)))) (cons (quote 2) (datum->syntax #f (quote (#%app call-with-values (lambda () (let-values () (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))) print-values)))) (cons (quote 135) (quote ())) (cons (quote 7) (datum->syntax #f (quote (#%module-begin (#%require "prolog.ss") (#%app call-with-values (lambda () (let-values () (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))) print-values))))) (cons (quote 2) (datum->syntax #f (quote (#%module-begin (#%require "prolog.ss") (#%app call-with-values (lambda () (let-values () (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))) print-values))))) (cons (quote 148) (datum->syntax #f (quote (module debug.pr scheme (#%module-begin (#%require "prolog.ss") (#%app call-with-values (lambda () (let-values () (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))) print-values)))))) (cons (quote 7) (datum->syntax #f (quote (module debug.pr scheme (#%module-begin (#%require "prolog.ss") (#%app call-with-values (lambda () (let-values () (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))) print-values)))))) (cons (quote 2) (datum->syntax #f (quote (module debug.pr scheme (#%module-begin (#%require "prolog.ss") (#%app call-with-values (lambda () (let-values () (#%app add-clause (quote zzz) (quote 4) (lambda (goal success-cont cut-cont failure-cont) (let-values (((?a1) (#%app make-variable (quote ?a) (#%app new-counter))) ((?b2) (#%app make-variable (quote ?b) (#%app new-counter))) ((?c3) (#%app make-variable (quote ?c) (#%app new-counter))) ((?d4) (#%app make-variable (quote ?d) (#%app new-counter)))) (if (#%app unify! (#%app cdr goal) (#%app cons ?a1 (#%app cons ?b2 (#%app cons ?c3 (#%app cons ?d4 (quote ())))))) (#%app success-cont failure-cont) (#%app failure-cont))))))) print-values)))))) (cons (quote error) (make-exn "module-path-index-resolve: \"self\" index has no resolution: #<module-path-index>" (current-continuation-marks))) (cons (quote EOF) (quote #f)))
"derivation-parser: error on token #683: <syntax-error, #(struct:exn:fail:contract \"module-path-index-resolve: \\\"self\\\" index has no resolution: #<module-path-index>\" #<continuation-mark-set>)>"
((parsing-loop "C:\\Program Files\\PLT\\collects\\parser-tools\\yacc.ss" 326 16) (|recache-deriv! method in term-record%| "C:\\Program Files\\PLT\\collects\\macro-debugger\\view\\term-record.ss" 133 4) (|get-deriv-hidden? method in term-record%| "C:\\Program Files\\PLT\\collects\\macro-debugger\\view\\term-record.ss" 74 16) (|add method in macro-stepper-widget%| "C:\\Program Files\\PLT\\collects\\macro-debugger\\view\\stepper.ss" 70 4))